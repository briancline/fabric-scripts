; -*- mode: clojure; -*-
; vim: filetype=clojure

(require '[clj-http.client :as http])

(defn remote-post
  [event]
  (http/post "http://localhost/notify" {:body (riemann.common/event-to-json event)
                                        :content-type :json
                                        :accept :json }))

(defn print-event
  [event]
  (println "--")
  (println event))

(defn print-index
  [event]
  (println "--index:")
  (println index))


(defn swift-errors
  [event]
  (= (:service event) "swift.errors"))

(defn dump
  [event]
  (println "-- did not match" event))

; (defmacro where-code
;  [code]
;  `(where (and (= (:service event) "swift.errors")
;               (> (.indexOf (:description event) (str " " ~code " ")) -1))
;          (with {:metric 1 :host "swift.proxy" :state "critical" :service ~code}
;                (rate 5 index))))

; (def where-503 (where-code "503"))


(logging/init :file "riemann.log")

(let [host "0.0.0.0"]
  (tcp-server :host host)
  (udp-server :host host)
  (ws-server  :host host))

(instrumentation {:interval 1})

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

; Keep events in the index for 5 minutes by default.
(let [index (default :ttl 300 (update-index (index)))]
  (defn where-code
    [code]
    (where (and (service "swift.errors")
                (> (.indexOf description (str " " code " ")) -1))
        (with {:metric 1 :host "swift.proxy" :state "critical" :service code}
              (counter index))))

  (defn extract-http-code
    []
    (where (service "swift.errors")
        (with {:metric 1
               :host "swift.proxy"
               :service (let [code (get (split description #" " 13) 11)]
                          (str "http " code))}
              (counter index))))

  ; Inbound events will be passed to these streams:
  (streams

    ; Index all events immediately.
    index

    (where-code "503")
    (where-code "200")
    ;(extract-http-code)

    (where (service "swift.errors")
           (with {:metric 5
                  :host "swift.proxy"
                  :service "omg"}
                 (counter index)))

    ;(where* (fn [e] (= (:service e) "swift.errors")) extract-http-code)
    ;(where (service "swift.errors")
    ;       (let [code (get (split (:description 'event) #" " 13) 11)
    ;             srv  (str "http " code)]
    ;         (with {:metric 1 :host "swift.proxy" :service srv}
    ;            (counter index))))

    ; Calculate an overall rate of events.
    (with {:metric 1 :host "riemann" :state "ok" :service "events/sec"}
      (rate 2 index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))

    ;(where (and
    ;         (service "swift.errors")
    ;         (> (.indexOf description " 503 ") -1))
    ;       (with {:metric 1 :host "swift.proxy" :state "critical" :service "prox 503"}
    ;         (rate 5 index)))

    ;(where (service "swift.errors")
    ;       (let [a 1]
    ;         (println "stream index:" index)
    ;         print-index))
    (where* swift-errors
            (with {:metric 1 :service "500"}
                  (rate 1 index)))



    ;(changed-state {:init "ok"}
    ;  (email "bcline@softlayer.com"))


;    (where (service "cpu") remote-post)
  )
)
